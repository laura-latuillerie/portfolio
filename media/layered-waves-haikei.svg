<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 1800 540" width="1800" height="540" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><rect x="0" y="0" width="1800" height="540" fill="#fff"/><path d="M0 409L17.7 403.3C35.3 397.7 70.7 386.3 106 377.7C141.3 369 176.7 363 212 348.7C247.3 334.3 282.7 311.7 318 314.3C353.3 317 388.7 345 423.8 359.3C459 373.7 494 374.3 529.2 379.2C564.3 384 599.7 393 635 379C670.3 365 705.7 328 741 309.8C776.3 291.7 811.7 292.3 847 300.8C882.3 309.3 917.7 325.7 953 334.5C988.3 343.3 1023.7 344.7 1059 343.3C1094.3 342 1129.7 338 1165 327C1200.3 316 1235.7 298 1270.8 293.2C1306 288.3 1341 296.7 1376.2 316C1411.3 335.3 1446.7 365.7 1482 367.2C1517.3 368.7 1552.7 341.3 1588 340.7C1623.3 340 1658.7 366 1694 365.7C1729.3 365.3 1764.7 338.7 1782.3 325.3L1800 312L1800 541L1782.3 541C1764.7 541 1729.3 541 1694 541C1658.7 541 1623.3 541 1588 541C1552.7 541 1517.3 541 1482 541C1446.7 541 1411.3 541 1376.2 541C1341 541 1306 541 1270.8 541C1235.7 541 1200.3 541 1165 541C1129.7 541 1094.3 541 1059 541C1023.7 541 988.3 541 953 541C917.7 541 882.3 541 847 541C811.7 541 776.3 541 741 541C705.7 541 670.3 541 635 541C599.7 541 564.3 541 529.2 541C494 541 459 541 423.8 541C388.7 541 353.3 541 318 541C282.7 541 247.3 541 212 541C176.7 541 141.3 541 106 541C70.7 541 35.3 541 17.7 541L0 541Z" fill="#d2e247"/><path d="M0 386L17.7 381C35.3 376 70.7 366 106 365.5C141.3 365 176.7 374 212 382.8C247.3 391.7 282.7 400.3 318 395C353.3 389.7 388.7 370.3 423.8 371C459 371.7 494 392.3 529.2 405.8C564.3 419.3 599.7 425.7 635 431.5C670.3 437.3 705.7 442.7 741 434C776.3 425.3 811.7 402.7 847 400.8C882.3 399 917.7 418 953 423C988.3 428 1023.7 419 1059 413.5C1094.3 408 1129.7 406 1165 396C1200.3 386 1235.7 368 1270.8 359C1306 350 1341 350 1376.2 350.7C1411.3 351.3 1446.7 352.7 1482 358.2C1517.3 363.7 1552.7 373.3 1588 379.5C1623.3 385.7 1658.7 388.3 1694 389.3C1729.3 390.3 1764.7 389.7 1782.3 389.3L1800 389L1800 541L1782.3 541C1764.7 541 1729.3 541 1694 541C1658.7 541 1623.3 541 1588 541C1552.7 541 1517.3 541 1482 541C1446.7 541 1411.3 541 1376.2 541C1341 541 1306 541 1270.8 541C1235.7 541 1200.3 541 1165 541C1129.7 541 1094.3 541 1059 541C1023.7 541 988.3 541 953 541C917.7 541 882.3 541 847 541C811.7 541 776.3 541 741 541C705.7 541 670.3 541 635 541C599.7 541 564.3 541 529.2 541C494 541 459 541 423.8 541C388.7 541 353.3 541 318 541C282.7 541 247.3 541 212 541C176.7 541 141.3 541 106 541C70.7 541 35.3 541 17.7 541L0 541Z" fill="#ff3b51"/><path d="M0 433L17.7 440.8C35.3 448.7 70.7 464.3 106 471.2C141.3 478 176.7 476 212 470C247.3 464 282.7 454 318 448.5C353.3 443 388.7 442 423.8 444.7C459 447.3 494 453.7 529.2 461.5C564.3 469.3 599.7 478.7 635 481C670.3 483.3 705.7 478.7 741 476.8C776.3 475 811.7 476 847 466.7C882.3 457.3 917.7 437.7 953 430.5C988.3 423.3 1023.7 428.7 1059 436.7C1094.3 444.7 1129.7 455.3 1165 464.2C1200.3 473 1235.7 480 1270.8 482.8C1306 485.7 1341 484.3 1376.2 477C1411.3 469.7 1446.7 456.3 1482 450C1517.3 443.7 1552.7 444.3 1588 446.5C1623.3 448.7 1658.7 452.3 1694 448C1729.3 443.7 1764.7 431.3 1782.3 425.2L1800 419L1800 541L1782.3 541C1764.7 541 1729.3 541 1694 541C1658.7 541 1623.3 541 1588 541C1552.7 541 1517.3 541 1482 541C1446.7 541 1411.3 541 1376.2 541C1341 541 1306 541 1270.8 541C1235.7 541 1200.3 541 1165 541C1129.7 541 1094.3 541 1059 541C1023.7 541 988.3 541 953 541C917.7 541 882.3 541 847 541C811.7 541 776.3 541 741 541C705.7 541 670.3 541 635 541C599.7 541 564.3 541 529.2 541C494 541 459 541 423.8 541C388.7 541 353.3 541 318 541C282.7 541 247.3 541 212 541C176.7 541 141.3 541 106 541C70.7 541 35.3 541 17.7 541L0 541Z" fill="#3d2ed1"/></svg>